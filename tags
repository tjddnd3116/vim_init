!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<C-W>+	init.vim	/^nmap <C-W>+ <C-W>=<SID>ws$/;"	m
<C-W>-	init.vim	/^nmap <C-W>- <C-W>-<SID>ws$/;"	m
<C-W><	init.vim	/^nmap <C-W>< <C-W><<SID>ws$/;"	m
<C-W>=	init.vim	/^nmap <C-W>= <C-W>+<SID>ws$/;"	m
<C-W>>	init.vim	/^nmap <C-W>> <C-W>><SID>ws$/;"	m
<C-h>	init.vim	/^nmap <C-h> <C-w>h$/;"	m
<C-j>	init.vim	/^nmap <C-j> <C-w>j$/;"	m
<C-k>	init.vim	/^nmap <C-k> <C-w>k$/;"	m
<C-l>	init.vim	/^nmap <C-l> <C-w>l$/;"	m
<CR>	init.vim	/^  inoremap <expr> <CR> InsertMapForEnter()$/;"	m
<END>	init.vim	/^nmap <END> :nohl<CR>$/;"	m
<F2>	init.vim	/^nmap <F2> :NERDTreeToggle<CR>$/;"	m
<F3>	init.vim	/^nmap <F3> :TagbarToggle<CR>$/;"	m
<HOME>	init.vim	/^nmap <HOME> :SyntasticToggleMode<CR>$/;"	m
<Leader>di	init.vim	/^nmap <Leader>di <Plug>VimspectorBalloonEval$/;"	m
<Leader>m<space>	init.vim	/^nmap <Leader>m<space> <plug>NERDCommenterInvert$/;"	m
<SID>ws	init.vim	/^nmap <SID>ws <Nop>$/;"	m
<c-@>	init.vim	/^  inoremap <silent><expr> <c-@> coc#refresh()$/;"	m
<c-space>	init.vim	/^  inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	init.vim	/^	imap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	init.vim	/^	inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader><C-a>	init.vim	/^nnoremap <leader><C-a> <C-]>$/;"	m
<leader><C-s>	init.vim	/^nnoremap <leader><C-s> <C-t>$/;"	m
<leader>a	init.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>aa	init.vim	/^nmap <leader>aa <Plug>VimspectorUpFrame$/;"	m
<leader>co	init.vim	/^nmap <leader>co <Plug>(coc-codelens-action)$/;"	m
<leader>dc	init.vim	/^nmap <leader>dc :!cc -g -I.\/libft\/libft.h -L.\/libft\/ -lft % -o main<CR>$/;"	m
<leader>dd	init.vim	/^nmap <leader>dd :call vimspector#Launch()<CR>$/;"	m
<leader>de	init.vim	/^nmap <leader>de :VimspectorEval$/;"	m
<leader>do	init.vim	/^nmap <leader>do :VimspectorShowOutput$/;"	m
<leader>dw	init.vim	/^nmap <leader>dw :VimspectorWatch$/;"	m
<leader>dx	init.vim	/^nmap <leader>dx :VimspectorReset<CR>$/;"	m
<leader>f	init.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>hh	init.vim	/^nmap <leader>hh :CocCommand clangd.switchSourceHeader <CR>$/;"	m
<leader>mm	init.vim	/^nmap <leader>mm <plug>NERDCommenterToggle$/;"	m
<leader>qf	init.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>sh	init.vim	/^nmap <leader>sh :CocCommand clangd.switchSourceHeader vsplit <CR>$/;"	m
<leader>ss	init.vim	/^nmap <leader>ss <Plug>VimspectorDownFrame$/;"	m
<leader>wq	init.vim	/^imap <leader>wq <ESC>:wq<CR>$/;"	m
<leader>ww	init.vim	/^imap <leader>ww <ESC>:w<CR>i$/;"	m
<nowait><expr>	init.vim	/^  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(0)\\<cr>" : "\\<Left>"$/;"	m
<nowait><expr>	init.vim	/^  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(1)\\<cr>" : "\\<Right>"$/;"	m
<nowait><expr>	init.vim	/^  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<nowait><expr>	init.vim	/^  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<nowait><expr>	init.vim	/^  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<nowait><expr>	init.vim	/^  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
CheckBackspace	init.vim	/^function! CheckBackspace() abort$/;"	f
InsertMapForEnter	init.vim	/^  function! InsertMapForEnter()$/;"	f
J	init.vim	/^nnoremap <silent> J :call <SID>show_documentation()<CR>$/;"	m
NERDTreeRespectWildIgnore	init.vim	/^let NERDTreeRespectWildIgnore=1$/;"	v
NERDTreeShowBookmarks	init.vim	/^let NERDTreeShowBookmarks=1$/;"	v
[g	init.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	init.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
ac	init.vim	/^omap ac <Plug>(coc-classobj-a)$/;"	m
af	init.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
delimitMate_expand_cr	init.vim	/^let delimitMate_expand_cr=1$/;"	v
delimitMate_matchpairs	init.vim	/^let delimitMate_matchpairs = "(:),[:],{:}"$/;"	v
g:NERDAltDelims_java	init.vim	/^let g:NERDAltDelims_java = 1$/;"	v
g:NERDCommentEmptyLines	init.vim	/^let g:NERDCommentEmptyLines = 1$/;"	v
g:NERDCompactSexyComs	init.vim	/^let g:NERDCompactSexyComs = 1$/;"	v
g:NERDCustomDelimiters	init.vim	/^let g:NERDCustomDelimiters = { 'c': { 'left': '\/**','right': '*\/' } }$/;"	v
g:NERDDefaultAlign	init.vim	/^let g:NERDDefaultAlign = 'left'$/;"	v
g:NERDSpaceDelims	init.vim	/^let g:NERDSpaceDelims = 1$/;"	v
g:NERDTreeExtensionHighlightColor	init.vim	/^let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error$/;"	v
g:NERDTreeExtensionHighlightColor	init.vim	/^let g:NERDTreeExtensionHighlightColor['Makefile'] = s:git_orange " sets the color of css files to blue$/;"	v
g:NERDTreeExtensionHighlightColor	init.vim	/^let g:NERDTreeExtensionHighlightColor['c'] = s:git_orange " sets the color of css files to blue$/;"	v
g:NERDTreeExtensionHighlightColor	init.vim	/^let g:NERDTreeExtensionHighlightColor['cpp'] = s:git_orange " sets the color of css files to blue$/;"	v
g:NERDTreeLimitedSyntax	init.vim	/^let g:NERDTreeLimitedSyntax = 1$/;"	v
g:NERDTreeWinSize	init.vim	/^let g:NERDTreeWinSize=20$/;"	v
g:NERDTrimTrailingWhitespace	init.vim	/^let g:NERDTrimTrailingWhitespace = 1$/;"	v
g:airline#extensions#gutentags#enabled	init.vim	/^let g:airline#extensions#gutentags#enabled = 1$/;"	v
g:airline_theme	init.vim	/^let g:airline_theme = 'base16_dracula'$/;"	v
g:better_whitespace_enabled	init.vim	/^let g:better_whitespace_enabled=1$/;"	v
g:better_whitespace_guicolor	init.vim	/^let g:better_whitespace_guicolor='Skyblue'$/;"	v
g:c_syntax_for_h	init.vim	/^let g:c_syntax_for_h = 1$/;"	v
g:coc_current_word_highlight_delay	init.vim	/^let g:coc_current_word_highlight_delay = 350$/;"	v
g:cpp_attributes_highlight	init.vim	/^let g:cpp_attributes_highlight = 0$/;"	v
g:cpp_function_highlight	init.vim	/^let g:cpp_function_highlight = 0$/;"	v
g:cpp_helper_after_creation	init.vim	/^let g:cpp_helper_after_creation = 1$/;"	v
g:cpp_helper_bracket_style	init.vim	/^let g:cpp_helper_bracket_style = 1$/;"	v
g:cpp_helper_declaration_offset	init.vim	/^let g:cpp_helper_declaration_offset = 0$/;"	v
g:cpp_helper_header_extension	init.vim	/^let g:cpp_helper_header_extension = ".hpp"$/;"	v
g:cpp_helper_implementation_offset	init.vim	/^let g:cpp_helper_implementation_offset = 1$/;"	v
g:cpp_helper_inclusion_guard_flavour	init.vim	/^let g:cpp_helper_inclusion_guard_flavour = 1$/;"	v
g:cpp_helper_inclusion_guard_format	init.vim	/^let g:cpp_helper_inclusion_guard_format = "%s_hpp"$/;"	v
g:cpp_helper_scope_marker_indent	init.vim	/^let g:cpp_helper_scope_marker_indent = 2$/;"	v
g:cpp_helper_source_extension	init.vim	/^let g:cpp_helper_source_extension = ".cpp"$/;"	v
g:cpp_helper_wipe_buffers	init.vim	/^let g:cpp_helper_wipe_buffers = 1$/;"	v
g:cpp_member_highlight	init.vim	/^let g:cpp_member_highlight = 1$/;"	v
g:cpp_simple_highlight	init.vim	/^let g:cpp_simple_highlight = 1$/;"	v
g:dracula_show_end_of_buffer	init.vim	/^let g:dracula_show_end_of_buffer = 1$/;"	v
g:floaterm_keymap_toggle	init.vim	/^let g:floaterm_keymap_toggle = '<Leader>tt'$/;"	v
g:gutentags_project_root	init.vim	/^let g:gutentags_project_root = ['Makefile']$/;"	v
g:hdr42mail	init.vim	/^let g:hdr42mail = 'soum@student.42seoul.kr'$/;"	v
g:hdr42user	init.vim	/^let g:hdr42user = 'soum'$/;"	v
g:strip_whitespace_on_save	init.vim	/^let g:strip_whitespace_on_save=0$/;"	v
g:syntastic_aggregate_errors	init.vim	/^let g:syntastic_aggregate_errors = 1$/;"	v
g:syntastic_always_populate_loc_list	init.vim	/^let g:syntastic_always_populate_loc_list = 0$/;"	v
g:syntastic_auto_loc_list	init.vim	/^let g:syntastic_auto_loc_list = 0$/;"	v
g:syntastic_c_checkers	init.vim	/^let g:syntastic_c_checkers = ['norminette', 'gcc']$/;"	v
g:syntastic_c_compiler_options	init.vim	/^let g:syntastic_c_compiler_options = "-std=c11 -Wall -Wextra -Werror -Wpedantic"$/;"	v
g:syntastic_c_include_dirs	init.vim	/^let g:syntastic_c_include_dirs = ['include', '..\/include', '..\/..\/include', 'libft', '..\/libft\/include', '..\/..\/libft\/include']$/;"	v
g:syntastic_c_norminette_args	init.vim	/^let g:syntastic_c_norminette_args = '-R CheckForbiddenSourceHeaer'$/;"	v
g:syntastic_c_norminette_args	init.vim	/^let g:syntastic_c_norminette_args = 'R CheckTopCommentHeader'$/;"	v
g:syntastic_check_on_open	init.vim	/^let g:syntastic_check_on_open = 0$/;"	v
g:syntastic_check_on_wq	init.vim	/^let g:syntastic_check_on_wq = 0$/;"	v
g:syntastic_cpp_compiler	init.vim	/^let g:syntastic_cpp_compiler = 'c++'$/;"	v
g:syntastic_cpp_compiler_options	init.vim	/^let g:syntastic_cpp_compiler_options = "-std=c++98 -Wall -Wextra -Werror -Wpedantic"$/;"	v
g:tagbar_position	init.vim	/^let g:tagbar_position = 'rightbelow'$/;"	v
g:tagbar_width	init.vim	/^let g:tagbar_width=30$/;"	v
g:vimspector_enable_mappings	init.vim	/^let g:vimspector_enable_mappings = 'HUMAN'$/;"	v
g:webdevicons_enable_airline_statusline	init.vim	/^let g:webdevicons_enable_airline_statusline = 1$/;"	v
g:webdevicons_enable_airline_tabline	init.vim	/^let g:webdevicons_enable_airline_tabline = 1$/;"	v
gd	init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
ic	init.vim	/^omap ic <Plug>(coc-classobj-i)$/;"	m
if	init.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
mapleader	init.vim	/^let mapleader = ","$/;"	v
s:git_orange	init.vim	/^let s:git_orange = 'F54D27'$/;"	v
show_documentation	init.vim	/^function! s:show_documentation()$/;"	f
